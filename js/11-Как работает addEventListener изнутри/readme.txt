Практика по уроку.
Как работает addEventListener изнутри
Повторяем код с канала https://www.youtube.com/c/ITKAMASUTRA
На этом канале 4 видео на эту тему.
Видео №1: https://www.youtube.com/watch?v=_ywsxTWYfVU&t=0s
Видео №2: https://www.youtube.com/watch?v=1VM4uCr9XW4&t=0s
Видео №3: https://www.youtube.com/watch?v=I86w1oUJKZc&t=0s
Видео №4: https://www.youtube.com/watch?v=0xJEPpMayR4&t=0s

На элемент HTML можно повесить addEventListener, чтобы он ждал, например, событие 'click' и запускал по этому событию какуб-нибудь функцию.
В этом уроке автор показывает, как реализовать такую же логику addEventListener для своего объекта.
В данном случае моделируется объект Car.
Он может стартовать - метод start
В методе start через триггер запускается событие start, а также через setTimeout триггерятся события speedoverflow и stop.
Вне объекта Car мы подписываемся нашим экземпляром mers на эти события start, speedoverflow и stop.
То есть, оформив подписку, мы ждем, когда произойду эти событися и вызовем в ответ на них аноноимные стрелочные функции (стрелочные функции для сохранения контекста)

Релизация подписки на события происходит в отдельно вынесенном классе Publisher
Суть класса в том, чтобы мы могли регистрировать новое событие. Если таковое появляется, мы записываем его как свойство подобъекта {_listeners}. Например, когда пользователь хочет подписаться на свое событие start, мы проверяем есть ли уже такое свойство у Car._listeners. Если нет такого свойства, оно создается и будет иметь тип массива.
В итоге после подписки у mers появляется такая структура:
mers._listeners.start = [],
mers._listeners.speedoverflow = [],
mers._listeners.stop = []
В момент новой подписки пробегаем по этим массивам и пушим новую функцию в нужной свойство.
В момент триггера - нужное событие достается из массивов слушателей событий.

Используется техника, при которой достучаться к свойству объекта можно не только через точку, но и через квадратные скобки.
Car.speed
это тоже самое, что и
Car['speed']

Объяснение этой техники подробнее можно найти с этого же канала в видео:
01. Работа со свойствами объекта через obj["свойство"]
https://www.youtube.com/watch?v=HnjsmjmLJ20&t=1447s

---------
Примечание:
Мы выносим класс Publisher за пределы Car для того, чтобы сделать этот класс универсальным.
Например, если мы вдруг захотим создать другой класс, никак не связанный с Car, например Animal, но захотим также иметь возможность подписываться на свои события.
Для этого просто сделаем класс Animal по аналогии с классом Car:
class Animal extends Publisher {
        constructor() {
          super();
          this.name;
          this.eatMeat = true;  
        }